name: build-deploy-app
run-name: build and deploy board-game app
on:
  push:
    branches:
      - "master"

jobs:
  board-build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: build-simple-api
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '8'
          cache: 'maven'
      - name: get access
        run: chmod +x mvnw
      - name: build with maven
        run: ./mvnw -B verify
      - name: login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_SIMPLEAPI_REPO_NAME }}:latest
  deploy:
    needs: board-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set permissions for private key
        run: |
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
      - name: Pull Docker image
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.AWS_EC2_USER_NAME }}@${{ secrets.AWS_EC2_PUBLIC_IP }} 'sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_SIMPLEAPI_REPO_NAME }}:latest'
      - name: Stop running container
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.AWS_EC2_USER_NAME }}@${{ secrets.AWS_EC2_PUBLIC_IP }} 'sudo docker stop main-repo || true'
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.AWS_EC2_USER_NAME }}@${{ secrets.AWS_EC2_PUBLIC_IP }} 'sudo docker rm main-repo || true'
      - name: Run new container
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.AWS_EC2_PUBLIC_IP }} '
          sudo docker run -e BOARD_API_DB_HOST=${{ secrets.AWS_RTS_HOST }} -e BOARD_API_DB_PORT=${{ secrets.AWS_RTS_PORT }} -e BOARD_API_DB_NAME=${{ secrets.AWS_RTS_DB_NAME }} -e BOARD_API_DB_USERNAME=${{ secrets.AWS_RTS_USER }} -e BOARD_API_DB_PASSWORD=${{ secrets.AWS_RTS_PASSWORD }} -d --name ${{ secrets.DOCKERHUB_SIMPLEAPI_REPO_NAME }} -p 80:8080 ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_SIMPLEAPI_REPO_NAME }}:latest'
